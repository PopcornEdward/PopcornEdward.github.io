[{"categories":null,"content":" 如果您对 Hugo 主题进行了修改，并且希望将这些修改提交到 Git 仓库中，则应该考虑以下两种情况： 如果您从 Hugo 主题库中下载了某个主题，并在其基础上进行修改，则建议在您自己的 Git 仓库中提交修改。这样，您可以更轻松地管理您所做的所有修改，并随时更新该主题的原始版本。\n如果您在 GitHub 中发现了某个 Hugo 主题，并且您对该主题进行了修改，则可以考虑 fork 该主题的仓库，并将您所做的修改提交到 fork 的仓库中。当您的修改被审核后，您可以提交 pull request 到原始仓库中，以便作者将您的修改合并到主题中。\n需要注意的是，无论您将修改提交到哪个仓库中，都需要遵循开源许可协议和作者的许可条件。如果您不确定是否可以在特定情况下进行修改，请查看主题的文档和许可证。 ","description":"","tags":null,"title":"Hugo Themes主题文件有修改改动的内容应该提交到哪个git仓库呢","uri":"/posts/2023/04/18/hugo-themes%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E6%9C%89%E4%BF%AE%E6%94%B9%E6%94%B9%E5%8A%A8%E7%9A%84%E5%86%85%E5%AE%B9%E5%BA%94%E8%AF%A5%E6%8F%90%E4%BA%A4%E5%88%B0%E5%93%AA%E4%B8%AAgit%E4%BB%93%E5%BA%93%E5%91%A2/"},{"categories":null,"content":" Hugo 的语法文档可以在 Hugo 官方网站（https://gohugo.io/documentation/）上找到，您可以根据需要查看以下文档：\n快速入门（https://gohugo.io/getting-started/quick-start/）介绍了如何安装 Hugo 并创建新的站点。 Hugo 基础语法（https://gohugo.io/content-management/syntax/）文档详细介绍了 Hugo 的基本语法，如如何创建页面、如何定义页面元数据、如何使用 Markdown 语法等。 主题开发文档（https://gohugo.io/templates/）介绍了如何使用 Hugo 模板来创建自定义主题。 内容管理文档（https://gohugo.io/content-management/organization/）介绍了如何组织和管理站点内容。 部署文档（https://gohugo.io/hosting-and-deployment/) 介绍了如何将站点部署到各种平台和服务上，包括 GitHub Pages、Netlify、Amazon S3 等。 在 Hugo 官方网站上，您还可以找到其他相关文档和资源，例如社区主题和插件，以及 Hugo 的 GitHub 存储库。此外，Hugo 的文档是开源的，您也可以在 Hugo 的 GitHub 存储库（https://github.com/gohugoio/hugo）中找到完整的文档源码。 ","description":"","tags":null,"title":"Hugo 语法文档哪里看","uri":"/posts/2023/04/19/hugo-%E8%AF%AD%E6%B3%95%E6%96%87%E6%A1%A3%E5%93%AA%E9%87%8C%E7%9C%8B/"},{"categories":null,"content":" section 2 section 2.1 section 2.2 section 2.3 section 2 section 2.1 section 2.2 section 2.3 如果您在 Git 中添加了一个子模块，但是现在要卸载它，可以按照以下步骤执行：\n删除 .gitmodules 文件中子模块的条目。 打开 .gitmodules 文件并找到您要删除的子模块条目，然后将其删除。例如： 1 2 3 [submodule \"path/to/submodule\"] path = path/to/submodule url = https://github.com/username/repo.git ","description":"","tags":null,"title":"Git Submodule 卸载模块","uri":"/posts/2023/04/18/git-submodule-%E5%8D%B8%E8%BD%BD%E6%A8%A1%E5%9D%97/"},{"categories":null,"content":"Hugo自定义短代码 在 Hugo 中，你可以使用自定义短代码来生成模板中的动态内容。自定义短代码是一段用于生成特定内容的模板代码片段，这个代码片段可以通过简单的一行代码在模板中调用。\n下面是一个简单的例子，演示如何在 Hugo 中定义和使用自定义短代码。我们将定义一个短代码 {{myShortcode }}，并让它生成一段简单的 HTML。\n在 Hugo 的根目录下，创建一个名为 layouts/shortcodes 的文件夹。\n在 layouts/shortcodes 文件夹中，创建一个名为 myShortcode.html 的文件。\n在 myShortcode.html 文件中，添加以下代码片段：\n1 \u003cp\u003eThis is my custom shortcode!\u003c/p\u003e 在模板中使用自定义短代码 **{{{myShortcode }}}。**例如： 1 2 3 4 5 6 7 8 9 10 \u003c!DOCTYPE html\u003e \u003chtml\u003e \u003chead\u003e \u003cmeta charset=\"utf-8\"\u003e \u003ctitle\u003e{{ .Title }}\u003c/title\u003e \u003c/head\u003e \u003cbody\u003e {{\u0026#123;myShortcode \u0026#125;}} \u003c/body\u003e \u003c/html\u003e 在浏览器中查看生成的页面，你应该看到 “This is my custom shortcode!” 这段文字。 总的来说，自定义短代码是一个十分有用的功能，它让你可以在 Hugo 中轻松地生成各种动态内容。\n","description":"","tags":["Hugo"],"title":"Hugo自定义短代码","uri":"/posts/2023/04/18/hugo%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9F%AD%E4%BB%A3%E7%A0%81/"},{"categories":null,"content":" 变量 描述 .Site 网站级别的变量，用于存储网站的全部信息，包括站点标题、url、作者等信息。 Site.BuildDrafts 如果设置为 true，则 Hugo 会对所有草稿页面进行构建。 Site.BuildFuture 如果设置为 true，则 Hugo 会对将来发布的页面进行构建。 Site.BuildExpired 如果设置为 true，则 Hugo 会对过期的页面进行构建。 Site.Charset 设置网站的字符编码，默认为 utf-8。 Site.LanguageCode 设置网站的语言代码，默认为 en-us。 Site.Title 网站标题。 Site.Params 网站中自定义的变量的命名空间，可以在配置文件中定义。 Site.Menus 网站菜单项的配置项。 Site.Home 网站首页的配置项。 Site.Pages 网站中所有页面的集合。 Site.RegularPages 网站中所有“正式”页面的集合，不包括草稿、过期等页面。 Site.AllPages 网站中所有页面（包括草稿、过期等）的集合。 Site.Data 网站中的数据文件。 Site.Taxonomies 网站中分类和标签的信息。 Site.Taxonomies. 网站中指定分类或标签的信息， 为分类或标签的名称。 .CurrentDate 当前时间，格式为 2006-01-02。 .Date 文章的日期。 .PublishDate 文章的发布日期。 .ExpiryDate 文章的过期日期。 .Lastmod 文章最后修改时间。 .Permalink 页面的永久链接。 .FuzzyWordCount 计算页面的模糊字数（即忽略 HTML、注释等元素的总字数）。 .PageNumber 如果在多页列表中，则为当前页面的序号。 .Paginate 分页器的配置信息。 .Paginator 分页器的结构体变量。 .WordCount 页面的总字数。 .Title 文章或页面的标题。 .Description 文章或页面的描述。 .Summary 文章或页面的摘要。 .Content 页面的主要内容。 .Params 页面的自定义变量的命名空间，可以在 Markdown 页面中定义。 .Site.Params. 等同于 .Params.，但是在 Hugo 中建议使用前者。 .Resources 页面中的资源，如图片、CSS、JavaScript 等。 .Params. 页面中自定义变量的值，可以在 Markdown 或配置文件中定义。 .ContentBaseName 页面的文件名（不包括扩展名）。 .FileName 页面的文件名（包括扩展名）。 .File 页面的文件信息，包括文件路径、名称、扩展名等。 .Section 当前页面所在的 section 名称，由页面的路径决定。 .Site.GetPage 根据指定路径获取页面信息。 .Site.GetPage 根据指定路径获取页面信息。 .RelLangURL 当前页面在指定语言下的 URL。 .RelPermalink 当前页面的相对 URL。 .RSSLink 当前页面 RSS 订阅的链接。 .Site.Author. 网站作者的信息， 可以是 name、email、bio 等。 .Site.Params. 获取网站中自定义变量的值。 with 可以嵌套在 range 中使用，用于在 range 的作用域内定义变量。 range 遍历集合，并将每个元素赋值给指定变量，可以使用 with 定义变量。 if 条件控制语句。 else 与 if 配合使用，表示 if 条件不成立时执行的语句。 partial 载入指定名称的 partial 方件并进行解析。 block 定义重载块，用于在父模板中指定可用于被子模板覆盖的区域。 define 定义 template 变量。 template 引用指定名称的 template。 shortcode Hugo 中内置的短代码语法，用于快速插入特定块的内容，例如音频、视频、图集等。 ","description":"","tags":null,"title":"Hugo的所有变量整理表","uri":"/posts/2023/04/18/hugo%E7%9A%84%E6%89%80%E6%9C%89%E5%8F%98%E9%87%8F%E6%95%B4%E7%90%86%E8%A1%A8/"},{"categories":null,"content":"hugo new post/ 如果有很多文章了怎么防止创建的时候md文件名重复 在使用 hugo new 命令创建新文章时，可以结合当前的时间戳来避免文件名重复。具体操作如下：\n在 config.toml 或 config.yaml 文件中设置 uglyUrls 为 true，这将使 Hugo 自动生成文件的 URL 格式为 domain.com/post/index.html，而不是默认的 domain.com/post/。 1 2 # config.toml uglyUrls = true 创建新文章时，使用当前的时间戳添加到文件名后面，例如： 1 $ hugo new post/my-new-post-1634090882.md 这里的 1634090882 表示当前的 Unix 时间戳，可以通过以下命令获取：\n1 $ date +%s 如果在命令行中不想手动输入时间戳，可以使用以下命令来自动生成：\n1 $ hugo new post/$(date +%Y-%m-%d)-my-new-post.md 这样会创建一个类似 2022-10-13-my-new-post.md 的文件。\n使用时间戳可以确保每个文件名都不同，避免重复。\n","description":"","tags":null,"title":"Hugo New Post Repeat","uri":"/posts/2023/04/18/hugo-new-post-repeat/"},{"categories":null,"content":"asdasda ","description":"","tags":null,"title":"Gndex","uri":"/posts/gndex/"},{"categories":["javascript","前端"],"content":"asdasda-1 sdfadsf asdfasdf\n","description":"","tags":null,"title":"Js20year-1","uri":"/posts/js20year/"},{"categories":null,"content":"00123-1 ","description":"","tags":["Hugo","Vue","React","nodeJS","Notion","blog","life","travel","golang","java","ecmascript","typescript","工程化","Vim"],"title":"我的文章标题-1","uri":"/posts/hello-world/"}]