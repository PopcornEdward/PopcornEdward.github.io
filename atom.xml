<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><title type="text">TonyFang-wiki</title><subtitle type="html">MemE is a powerful and highly customizable GoHugo theme for personal blogs.</subtitle><updated>2023-04-19T12:05:36+08:00</updated><id>http://localhost:1313/</id><link rel="alternate" type="text/html" href="http://localhost:1313/"/><link rel="self" type="application/atom+xml" href="http://localhost:1313/atom.xml"/><author><name>TonyFang</name><uri>http://localhost:1313/</uri><email>reuixiy@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><generator uri="https://gohugo.io/" version="0.111.3">Hugo</generator><entry><title type="text">Hugo Themes主题文件有修改改动的内容应该提交到哪个git仓库呢</title><link rel="alternate" type="text/html" href="http://localhost:1313/posts/2023/04/18/hugo-themes%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E6%9C%89%E4%BF%AE%E6%94%B9%E6%94%B9%E5%8A%A8%E7%9A%84%E5%86%85%E5%AE%B9%E5%BA%94%E8%AF%A5%E6%8F%90%E4%BA%A4%E5%88%B0%E5%93%AA%E4%B8%AAgit%E4%BB%93%E5%BA%93%E5%91%A2/"/><id>http://localhost:1313/posts/2023/04/18/hugo-themes%E4%B8%BB%E9%A2%98%E6%96%87%E4%BB%B6%E6%9C%89%E4%BF%AE%E6%94%B9%E6%94%B9%E5%8A%A8%E7%9A%84%E5%86%85%E5%AE%B9%E5%BA%94%E8%AF%A5%E6%8F%90%E4%BA%A4%E5%88%B0%E5%93%AA%E4%B8%AAgit%E4%BB%93%E5%BA%93%E5%91%A2/</id><updated>2023-04-19T11:41:01+08:00</updated><published>2023-04-19T10:48:14+08:00</published><author><name>TonyFang</name><uri>https://io-oi.me/</uri><email>reuixiy@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"> 如果您对 Hugo 主题进行了修改，并且希望将这些修改提交到 Git 仓库中，则应该考虑以下两种情况： 如果您从 Hugo 主题库中下载了某个主题，并在其基础上进行修改，则建议在您自己的 Git 仓库中提交修改。这样，您可以更轻松地管理您所做的所有修改，并随时更新该主题的原始版本。
如果您在 GitHub 中发现了某个 Hugo 主题，并且您对该主题进行了修改，则可以考虑 fork 该主题的仓库，并将您所做的修改提交到 fork 的仓库中。当您的修改被审核后，您可以提交 pull request 到原始仓库中，以便作者将您的修改合并到主题中。
需要注意的是，无论您将修改提交到哪个仓库中，都需要遵循开源许可协议和作者的许可条件。如果您不确定是否可以在特定情况下进行修改，请查看主题的文档和许可证。</summary><content type="html">&lt;blockquote>
&lt;h3 id="如果您对-hugo-主题进行了修改并且希望将这些修改提交到-git-仓库中则应该考虑以下两种情况">如果您对 Hugo 主题进行了修改，并且希望将这些修改提交到 Git 仓库中，则应该考虑以下两种情况：&lt;/h3>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>如果您从 Hugo 主题库中下载了某个主题，并在其基础上进行修改，则建议在您自己的 Git 仓库中提交修改。这样，您可以更轻松地管理您所做的所有修改，并随时更新该主题的原始版本。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>如果您在 GitHub 中发现了某个 Hugo 主题，并且您对该主题进行了修改，则可以考虑 fork 该主题的仓库，并将您所做的修改提交到 fork 的仓库中。当您的修改被审核后，您可以提交 pull request 到原始仓库中，以便作者将您的修改合并到主题中。&lt;/p>
&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>
&lt;h3 id="需要注意的是无论您将修改提交到哪个仓库中都需要遵循开源许可协议和作者的许可条件如果您不确定是否可以在特定情况下进行修改请查看主题的文档和许可证">需要注意的是，无论您将修改提交到哪个仓库中，都需要遵循开源许可协议和作者的许可条件。如果您不确定是否可以在特定情况下进行修改，请查看主题的文档和许可证。&lt;/h3>
&lt;/li>
&lt;/ul></content></entry><entry><title type="text">Hugo 语法文档哪里看</title><link rel="alternate" type="text/html" href="http://localhost:1313/posts/2023/04/19/hugo-%E8%AF%AD%E6%B3%95%E6%96%87%E6%A1%A3%E5%93%AA%E9%87%8C%E7%9C%8B/"/><id>http://localhost:1313/posts/2023/04/19/hugo-%E8%AF%AD%E6%B3%95%E6%96%87%E6%A1%A3%E5%93%AA%E9%87%8C%E7%9C%8B/</id><updated>2023-04-19T11:40:20+08:00</updated><published>2023-04-19T10:44:25+08:00</published><author><name>TonyFang</name><uri>https://io-oi.me/</uri><email>reuixiy@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"> Hugo 的语法文档可以在 Hugo 官方网站（https://gohugo.io/documentation/）上找到，您可以根据需要查看以下文档：
快速入门（https://gohugo.io/getting-started/quick-start/）介绍了如何安装 Hugo 并创建新的站点。 Hugo 基础语法（https://gohugo.io/content-management/syntax/）文档详细介绍了 Hugo 的基本语法，如如何创建页面、如何定义页面元数据、如何使用 Markdown 语法等。 主题开发文档（https://gohugo.io/templates/）介绍了如何使用 Hugo 模板来创建自定义主题。 内容管理文档（https://gohugo.io/content-management/organization/）介绍了如何组织和管理站点内容。 部署文档（https://gohugo.io/hosting-and-deployment/) 介绍了如何将站点部署到各种平台和服务上，包括 GitHub Pages、Netlify、Amazon S3 等。 在 Hugo 官方网站上，您还可以找到其他相关文档和资源，例如社区主题和插件，以及 Hugo 的 GitHub 存储库。此外，Hugo 的文档是开源的，您也可以在 Hugo 的 GitHub 存储库（https://github.com/gohugoio/hugo）中找到完整的文档源码。</summary><content type="html">&lt;blockquote>
&lt;p>Hugo 的语法文档可以在 Hugo 官方网站（https://gohugo.io/documentation/）上找到，您可以根据需要查看以下文档：&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>快速入门（https://gohugo.io/getting-started/quick-start/）介绍了如何安装 Hugo 并创建新的站点。&lt;/li>
&lt;li>Hugo 基础语法（https://gohugo.io/content-management/syntax/）文档详细介绍了 Hugo 的基本语法，如如何创建页面、如何定义页面元数据、如何使用 Markdown 语法等。&lt;/li>
&lt;li>主题开发文档（https://gohugo.io/templates/）介绍了如何使用 Hugo 模板来创建自定义主题。&lt;/li>
&lt;li>内容管理文档（https://gohugo.io/content-management/organization/）介绍了如何组织和管理站点内容。&lt;/li>
&lt;li>部署文档（https://gohugo.io/hosting-and-deployment/) 介绍了如何将站点部署到各种平台和服务上，包括 GitHub Pages、Netlify、Amazon S3 等。&lt;/li>
&lt;li>在 Hugo 官方网站上，您还可以找到其他相关文档和资源，例如社区主题和插件，以及 Hugo 的 GitHub 存储库。此外，Hugo 的文档是开源的，您也可以在 Hugo 的 GitHub 存储库（https://github.com/gohugoio/hugo）中找到完整的文档源码。&lt;/li>
&lt;/ol></content></entry><entry><title type="text">Git Submodule 卸载模块</title><link rel="alternate" type="text/html" href="http://localhost:1313/posts/2023/04/18/git-submodule-%E5%8D%B8%E8%BD%BD%E6%A8%A1%E5%9D%97/"/><id>http://localhost:1313/posts/2023/04/18/git-submodule-%E5%8D%B8%E8%BD%BD%E6%A8%A1%E5%9D%97/</id><updated>2023-04-19T11:41:01+08:00</updated><published>2023-04-18T15:53:54+08:00</published><author><name>TonyFang</name><uri>https://io-oi.me/</uri><email>reuixiy@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html"> section 2 section 2.1 section 2.2 section 2.3 section 2 section 2.1 section 2.2 section 2.3 如果您在 Git 中添加了一个子模块，但是现在要卸载它，可以按照以下步骤执行：
删除 .gitmodules 文件中子模块的条目。 打开 .gitmodules 文件并找到您要删除的子模块条目，然后将其删除。例如： 1 2 3 [submodule &amp;#34;path/to/submodule&amp;#34;] path = path/to/submodule url = https://github.com/username/repo.git</summary><content type="html">&lt;ul>
&lt;li>&lt;a href="http://localhost:1313/posts/2023/04/18/git-submodule-%E5%8D%B8%E8%BD%BD%E6%A8%A1%E5%9D%97/#section-2">section 2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="http://localhost:1313/posts/2023/04/18/git-submodule-%E5%8D%B8%E8%BD%BD%E6%A8%A1%E5%9D%97/#section-21">section 2.1&lt;/a>
&lt;ul>
&lt;li>&lt;a href="http://localhost:1313/posts/2023/04/18/git-submodule-%E5%8D%B8%E8%BD%BD%E6%A8%A1%E5%9D%97/#section-22">section 2.2&lt;/a>
&lt;ul>
&lt;li>&lt;a href="http://localhost:1313/posts/2023/04/18/git-submodule-%E5%8D%B8%E8%BD%BD%E6%A8%A1%E5%9D%97/#section-23">section 2.3&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="section-2">section 2&lt;/h1>
&lt;h2 id="section-21">section 2.1&lt;/h2>
&lt;h3 id="section-22">section 2.2&lt;/h3>
&lt;h4 id="section-23">section 2.3&lt;/h4>
&lt;p>如果您在 Git 中添加了一个子模块，但是现在要卸载它，可以按照以下步骤执行：&lt;/p>
&lt;ol>
&lt;li>删除 .gitmodules 文件中子模块的条目。&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>打开 .gitmodules 文件并找到您要删除的子模块条目，然后将其删除。例如：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">&lt;span class="o">[&lt;/span>submodule &lt;span class="s2">&amp;#34;path/to/submodule&amp;#34;&lt;/span>&lt;span class="o">]&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">path&lt;/span> &lt;span class="o">=&lt;/span> path/to/submodule
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nv">url&lt;/span> &lt;span class="o">=&lt;/span> https://github.com/username/repo.git
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul></content></entry><entry><title type="text">Hugo自定义短代码</title><link rel="alternate" type="text/html" href="http://localhost:1313/posts/2023/04/18/hugo%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9F%AD%E4%BB%A3%E7%A0%81/"/><id>http://localhost:1313/posts/2023/04/18/hugo%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9F%AD%E4%BB%A3%E7%A0%81/</id><updated>2023-04-19T11:41:01+08:00</updated><published>2023-04-18T15:37:09+08:00</published><author><name>TonyFang</name><uri>https://io-oi.me/</uri><email>reuixiy@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">Hugo自定义短代码 在 Hugo 中，你可以使用自定义短代码来生成模板中的动态内容。自定义短代码是一段用于生成特定内容的模板代码片段，这个代码片段可以通过简单的一行代码在模板中调用。
下面是一个简单的例子，演示如何在 Hugo 中定义和使用自定义短代码。我们将定义一个短代码 {{myShortcode }}，并让它生成一段简单的 HTML。
在 Hugo 的根目录下，创建一个名为 layouts/shortcodes 的文件夹。
在 layouts/shortcodes 文件夹中，创建一个名为 myShortcode.html 的文件。
在 myShortcode.html 文件中，添加以下代码片段：
1 &amp;lt;p&amp;gt;This is my custom shortcode!&amp;lt;/p&amp;gt; 在模板中使用自定义短代码 **{{{myShortcode }}}。**例如： 1 2 3 4 5 6 7 8 9 10 &amp;lt;!</summary><content type="html">&lt;h1 id="hugo自定义短代码">Hugo自定义短代码&lt;/h1>
&lt;blockquote>
&lt;p>在 Hugo 中，你可以使用自定义短代码来生成模板中的动态内容。自定义短代码是一段用于生成特定内容的模板代码片段，这个代码片段可以通过简单的一行代码在模板中调用。&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>下面是一个简单的例子，演示如何在 Hugo 中定义和使用自定义短代码。我们将定义一个短代码 &lt;code>{{myShortcode }}&lt;/code>，并让它生成一段简单的 HTML。&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>
&lt;p>在 Hugo 的根目录下，创建一个名为 layouts/shortcodes 的文件夹。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 layouts/shortcodes 文件夹中，创建一个名为 myShortcode.html 的文件。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>在 myShortcode.html 文件中，添加以下代码片段：&lt;/p>
&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>This is my custom shortcode!&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">p&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="4">
&lt;li>在模板中使用自定义短代码 **{{{myShortcode }}}。**例如：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-html" data-lang="html">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&amp;lt;!DOCTYPE html&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">meta&lt;/span> &lt;span class="na">charset&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="s">&amp;#34;utf-8&amp;#34;&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>{{ .Title }}&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">title&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">head&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> {{&lt;span class="ni">&amp;amp;#123;&lt;/span>myShortcode &lt;span class="ni">&amp;amp;#125;&lt;/span>}}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">body&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">&amp;lt;/&lt;/span>&lt;span class="nt">html&lt;/span>&lt;span class="p">&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="5">
&lt;li>在浏览器中查看生成的页面，你应该看到 &amp;ldquo;This is my custom shortcode!&amp;rdquo; 这段文字。&lt;/li>
&lt;/ol>
&lt;blockquote>
&lt;p>总的来说，自定义短代码是一个十分有用的功能，它让你可以在 Hugo 中轻松地生成各种动态内容。&lt;/p>
&lt;/blockquote></content><category scheme="http://localhost:1313/tags/hugo/" term="Hugo" label="Hugo"/></entry><entry><title type="text">Hugo的所有变量整理表</title><link rel="alternate" type="text/html" href="http://localhost:1313/posts/2023/04/18/hugo%E7%9A%84%E6%89%80%E6%9C%89%E5%8F%98%E9%87%8F%E6%95%B4%E7%90%86%E8%A1%A8/"/><id>http://localhost:1313/posts/2023/04/18/hugo%E7%9A%84%E6%89%80%E6%9C%89%E5%8F%98%E9%87%8F%E6%95%B4%E7%90%86%E8%A1%A8/</id><updated>2023-04-19T11:41:01+08:00</updated><published>2023-04-18T14:30:20+08:00</published><author><name>TonyFang</name><uri>https://io-oi.me/</uri><email>reuixiy@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">变量 描述 .Site 网站级别的变量，用于存储网站的全部信息，包括站点标题、url、作者等信息。 Site.BuildDrafts 如果设置为 true，则 Hugo 会对所有草稿页面进行构建。 Site.BuildFuture 如果设置为 true，则 Hugo 会对将来发布的页面进行构建。 Site.BuildExpired 如果设置为 true，则 Hugo 会对过期的页面进行构建。 Site.Charset 设置网站的字符编码，默认为 utf-8。 Site.LanguageCode 设置网站的语言代码，默认为 en-us。 Site.Title 网站标题。 Site.Params 网站中自定义的变量的命名空间，可以在配置文件中定义。 Site.Menus 网站菜单项的配置项。 Site.Home 网站首页的配置项。 Site.Pages 网站中所有页面的集合。 Site.RegularPages 网站中所有“正式”页面的集合，不包括草稿、过期等页面。 Site.AllPages 网站中所有页面（包括草稿、过期等）的集合。 Site.Data 网站中的数据文件。 Site.</summary><content type="html">&lt;table>
&lt;thead>
&lt;tr>
&lt;th>变量&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>.Site&lt;/td>
&lt;td>网站级别的变量，用于存储网站的全部信息，包括站点标题、url、作者等信息。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Site.BuildDrafts&lt;/td>
&lt;td>如果设置为 true，则 Hugo 会对所有草稿页面进行构建。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Site.BuildFuture&lt;/td>
&lt;td>如果设置为 true，则 Hugo 会对将来发布的页面进行构建。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Site.BuildExpired&lt;/td>
&lt;td>如果设置为 true，则 Hugo 会对过期的页面进行构建。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Site.Charset&lt;/td>
&lt;td>设置网站的字符编码，默认为 utf-8。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Site.LanguageCode&lt;/td>
&lt;td>设置网站的语言代码，默认为 en-us。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Site.Title&lt;/td>
&lt;td>网站标题。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Site.Params&lt;/td>
&lt;td>网站中自定义的变量的命名空间，可以在配置文件中定义。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Site.Menus&lt;/td>
&lt;td>网站菜单项的配置项。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Site.Home&lt;/td>
&lt;td>网站首页的配置项。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Site.Pages&lt;/td>
&lt;td>网站中所有页面的集合。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Site.RegularPages&lt;/td>
&lt;td>网站中所有“正式”页面的集合，不包括草稿、过期等页面。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Site.AllPages&lt;/td>
&lt;td>网站中所有页面（包括草稿、过期等）的集合。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Site.Data&lt;/td>
&lt;td>网站中的数据文件。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Site.Taxonomies&lt;/td>
&lt;td>网站中分类和标签的信息。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>Site.Taxonomies.&lt;/td>
&lt;td>&lt;taxonomy> 网站中指定分类或标签的信息，&lt;taxonomy> 为分类或标签的名称。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.CurrentDate&lt;/td>
&lt;td>当前时间，格式为 2006-01-02。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Date&lt;/td>
&lt;td>文章的日期。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.PublishDate&lt;/td>
&lt;td>文章的发布日期。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.ExpiryDate&lt;/td>
&lt;td>文章的过期日期。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Lastmod&lt;/td>
&lt;td>文章最后修改时间。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Permalink&lt;/td>
&lt;td>页面的永久链接。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.FuzzyWordCount&lt;/td>
&lt;td>计算页面的模糊字数（即忽略 HTML、注释等元素的总字数）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.PageNumber&lt;/td>
&lt;td>如果在多页列表中，则为当前页面的序号。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Paginate&lt;/td>
&lt;td>分页器的配置信息。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Paginator&lt;/td>
&lt;td>分页器的结构体变量。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.WordCount&lt;/td>
&lt;td>页面的总字数。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Title&lt;/td>
&lt;td>文章或页面的标题。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Description&lt;/td>
&lt;td>文章或页面的描述。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Summary&lt;/td>
&lt;td>文章或页面的摘要。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Content&lt;/td>
&lt;td>页面的主要内容。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Params&lt;/td>
&lt;td>页面的自定义变量的命名空间，可以在 Markdown 页面中定义。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Site.Params.&lt;/td>
&lt;td>&lt;name> 等同于 .Params.&lt;name>，但是在 Hugo 中建议使用前者。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Resources&lt;/td>
&lt;td>页面中的资源，如图片、CSS、JavaScript 等。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Params.&lt;name>&lt;/td>
&lt;td>页面中自定义变量的值，可以在 Markdown 或配置文件中定义。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.ContentBaseName&lt;/td>
&lt;td>页面的文件名（不包括扩展名）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.FileName&lt;/td>
&lt;td>页面的文件名（包括扩展名）。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.File&lt;/td>
&lt;td>页面的文件信息，包括文件路径、名称、扩展名等。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Section&lt;/td>
&lt;td>当前页面所在的 section 名称，由页面的路径决定。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Site.GetPage&lt;/td>
&lt;td>根据指定路径获取页面信息。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Site.GetPage&lt;/td>
&lt;td>根据指定路径获取页面信息。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.RelLangURL&lt;/td>
&lt;td>当前页面在指定语言下的 URL。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.RelPermalink&lt;/td>
&lt;td>当前页面的相对 URL。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.RSSLink&lt;/td>
&lt;td>当前页面 RSS 订阅的链接。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Site.Author.&lt;field>&lt;/td>
&lt;td>网站作者的信息，&lt;field> 可以是 name、email、bio 等。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>.Site.Params.&lt;name>&lt;/td>
&lt;td>获取网站中自定义变量的值。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>with&lt;/td>
&lt;td>可以嵌套在 range 中使用，用于在 range 的作用域内定义变量。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>range&lt;/td>
&lt;td>遍历集合，并将每个元素赋值给指定变量，可以使用 with 定义变量。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>if&lt;/td>
&lt;td>条件控制语句。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>else&lt;/td>
&lt;td>与 if 配合使用，表示 if 条件不成立时执行的语句。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>partial&lt;/td>
&lt;td>载入指定名称的 partial 方件并进行解析。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>block&lt;/td>
&lt;td>定义重载块，用于在父模板中指定可用于被子模板覆盖的区域。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>define&lt;/td>
&lt;td>定义 template 变量。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>template&lt;/td>
&lt;td>引用指定名称的 template。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>shortcode &lt;/code>&lt;/td>
&lt;td>Hugo 中内置的短代码语法，用于快速插入特定块的内容，例如音频、视频、图集等。&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table></content></entry><entry><title type="text">Hugo New Post Repeat</title><link rel="alternate" type="text/html" href="http://localhost:1313/posts/2023/04/18/hugo-new-post-repeat/"/><id>http://localhost:1313/posts/2023/04/18/hugo-new-post-repeat/</id><updated>2023-04-19T11:41:01+08:00</updated><published>2023-04-18T14:23:24+08:00</published><author><name>TonyFang</name><uri>https://io-oi.me/</uri><email>reuixiy@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">hugo new post/ 如果有很多文章了怎么防止创建的时候md文件名重复 在使用 hugo new 命令创建新文章时，可以结合当前的时间戳来避免文件名重复。具体操作如下：
在 config.toml 或 config.yaml 文件中设置 uglyUrls 为 true，这将使 Hugo 自动生成文件的 URL 格式为 domain.com/post/index.html，而不是默认的 domain.com/post/。 1 2 # config.toml uglyUrls = true 创建新文章时，使用当前的时间戳添加到文件名后面，例如： 1 $ hugo new post/my-new-post-1634090882.md 这里的 1634090882 表示当前的 Unix 时间戳，可以通过以下命令获取：
1 $ date +%s 如果在命令行中不想手动输入时间戳，可以使用以下命令来自动生成：</summary><content type="html">&lt;h1 id="hugo-new-post-如果有很多文章了怎么防止创建的时候md文件名重复">hugo new post/ 如果有很多文章了怎么防止创建的时候md文件名重复&lt;/h1>
&lt;blockquote>
&lt;p>在使用 hugo new 命令创建新文章时，可以结合当前的时间戳来避免文件名重复。具体操作如下：&lt;/p>
&lt;/blockquote>
&lt;ol>
&lt;li>在 config.toml 或 config.yaml 文件中设置 uglyUrls 为 true，这将使 Hugo 自动生成文件的 URL 格式为 domain.com/post/index.html，而不是默认的 domain.com/post/。&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-toml" data-lang="toml">&lt;span class="line">&lt;span class="cl">&lt;span class="c"># config.toml&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nx">uglyUrls&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="kc">true&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>创建新文章时，使用当前的时间戳添加到文件名后面，例如：&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ hugo new post/my-new-post-1634090882.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这里的 1634090882 表示当前的 Unix 时间戳，可以通过以下命令获取：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ date +%s
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>如果在命令行中不想手动输入时间戳，可以使用以下命令来自动生成：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-sh" data-lang="sh">&lt;span class="line">&lt;span class="cl">$ hugo new post/&lt;span class="k">$(&lt;/span>date +%Y-%m-%d&lt;span class="k">)&lt;/span>-my-new-post.md
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>这样会创建一个类似 2022-10-13-my-new-post.md 的文件。&lt;/p>
&lt;p>使用时间戳可以确保每个文件名都不同，避免重复。&lt;/p></content></entry><entry><title type="text">Gndex</title><link rel="alternate" type="text/html" href="http://localhost:1313/posts/gndex/"/><id>http://localhost:1313/posts/gndex/</id><updated>2023-04-18T13:15:31+08:00</updated><published>2023-04-18T11:56:39+08:00</published><author><name>TonyFang</name><uri>https://io-oi.me/</uri><email>reuixiy@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">asdasda</summary><content type="html">&lt;h1 id="asdasda">asdasda&lt;/h1></content></entry><entry><title type="text">Js20year-1</title><link rel="alternate" type="text/html" href="http://localhost:1313/posts/js20year/"/><id>http://localhost:1313/posts/js20year/</id><updated>2023-04-19T11:16:11+08:00</updated><published>2023-04-17T22:30:34+08:00</published><author><name>TonyFang</name><uri>https://io-oi.me/</uri><email>reuixiy@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">asdasda-1 sdfadsf asdfasdf</summary><content type="html">&lt;h1 id="asdasda-1">asdasda-1&lt;/h1>
&lt;h3 id="sdfadsf">sdfadsf&lt;/h3>
&lt;p>asdfasdf&lt;/p>
&lt;p>&lt;img src="http://localhost:1313/images/theme-documentation-advanced/preview.png" alt="图片描述">&lt;/p></content><category scheme="http://localhost:1313/categories/javascript/" term="javascript" label="javascript"/><category scheme="http://localhost:1313/categories/%E5%89%8D%E7%AB%AF/" term="前端" label="前端"/></entry><entry><title type="text">我的文章标题-1</title><link rel="alternate" type="text/html" href="http://localhost:1313/posts/hello-world/"/><id>http://localhost:1313/posts/hello-world/</id><updated>2023-04-19T11:15:59+08:00</updated><published>2023-04-17T21:55:03+08:00</published><author><name>TonyFang</name><uri>https://io-oi.me/</uri><email>reuixiy@gmail.com</email></author><rights>[CC BY-NC-SA 4.0](https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en)</rights><summary type="html">00123-1</summary><content type="html">&lt;h1 id="00123-1">00123-1&lt;/h1></content><category scheme="http://localhost:1313/tags/hugo/" term="Hugo" label="Hugo"/><category scheme="http://localhost:1313/tags/vue/" term="Vue" label="Vue"/><category scheme="http://localhost:1313/tags/react/" term="React" label="React"/><category scheme="http://localhost:1313/tags/nodejs/" term="nodeJS" label="nodeJS"/><category scheme="http://localhost:1313/tags/notion/" term="Notion" label="Notion"/><category scheme="http://localhost:1313/tags/blog/" term="blog" label="blog"/><category scheme="http://localhost:1313/tags/life/" term="life" label="life"/><category scheme="http://localhost:1313/tags/travel/" term="travel" label="travel"/><category scheme="http://localhost:1313/tags/golang/" term="golang" label="golang"/><category scheme="http://localhost:1313/tags/java/" term="java" label="java"/><category scheme="http://localhost:1313/tags/ecmascript/" term="ecmascript" label="ecmascript"/><category scheme="http://localhost:1313/tags/typescript/" term="typescript" label="typescript"/><category scheme="http://localhost:1313/tags/%E5%B7%A5%E7%A8%8B%E5%8C%96/" term="工程化" label="工程化"/><category scheme="http://localhost:1313/tags/vim/" term="Vim" label="Vim"/></entry></feed>